import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
import csv
import json

# Chrome 브라우저를 백그라운드에서 실행하도록 옵션 설정
chrome_options = Options()
chrome_options.add_argument('--headless')  # 백그라운드 실행 옵션 추가

# 크롬 드라이버 다운로드 및 실행 경로 지정 (자신의 크롬 드라이버 경로로 변경) 한번 실행하고 끝
# chrome_driver_path = 'C:\\education\\ml_dev\\coin\\jh_-\\investing\\chromedriver-win64'

# Selenium으로 웹페이지 열기 함수
def get_news_info(url, start_nm=1):
    try:
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # 백그라운드 실행 옵션 추가
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(url)
        time.sleep(5)  # 페이지가 로딩되기를 기다림 (시간이 많이 걸릴 경우 조절 필요)

        # 현재 페이지 소스코드 가져오기
        page_source = driver.page_source

        # BeautifulSoup을 사용하여 뉴스 제목과 올라온 시간 추출
        soup = BeautifulSoup(page_source, 'html.parser')    

        news_info_list = []

        # 뉴스 제목과 올라온 시간이 포함된 요소 선택
        news_elements = soup.select('.largeTitle') 

        for element in news_elements:
            # largeTitle 클래스 내에서 모든 .title과 .date를 찾음
            titles = element.select('.title')
            dates = element.select('.date')

            # 뉴스 제목과 올라온 시간이 있는 경우에만 결과 리스트에 추가
            for title, date in zip(titles, dates):
                title_text = title.text.strip()
                date_text = date.text.strip()
                news_info_list.append({'number': start_nm,'title': title_text, 'time': date_text})
                start_nm += 1 # 다음 번호 증가시킴

        # 드라이버 종료
        driver.quit()

        return news_info_list

    except Exception as e:
        # 에러가 발생했을 때 현재 페이지 번호를 출력하고 예외를 다시 발생시킴
        print(f"에러가 발생했습니다. 페이지: {url}")
        raise e

# 여러 페이지의 뉴스 정보를 저장할 리스트
all_news_info = []

# 1부터 2까지의 페이지에 대해 뉴스 정보를 가져와서 리스트에 추가
for page_number in range(1, 3):
    url = f"https://www.investing.com/news/cryptocurrency-news/{page_number}"
    try:
        news_info = get_news_info(url)
        all_news_info.extend(news_info)
    except Exception as e:
        # 에러가 발생했을 때 현재 페이지 번호를 출력하고 반복문을 종료
        print(f"에러가 발생하여 프로그램을 종료합니다. 페이지: {page_number}")
        break

# 뉴스 정보를 출력하는 코드
# for i, news in enumerate(all_news_info, 1):
    # print(f"{i}. 뉴스 헤더: {news['title']}, 업로드 시간:{news['time']}")
    
# 총 몇개의 데이터를 가져왔는지 출력
print(f"\n총 {len(all_news_info)}개의 뉴스 정보 크롤링 완료 ")

# 뉴스 정보를 JSON 파일로 저장
result_data = {'news_info': all_news_info}
with open('all_cryptocurrency_news_info.json', 'w', encoding='utf-8') as json_file:
    json.dump(result_data, json_file, ensure_ascii=False, indent=4)

print("뉴스 정보가 성공적으로 저장되었습니다.")